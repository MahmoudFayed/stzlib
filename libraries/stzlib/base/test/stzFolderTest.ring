
load "../stzbase.ring"

/*

Main thematic sections of this test file:

- Basic folder creation and information retrieval
- Navigation operations 
- File and folder operations (listing, counting, checking existence)
- Folder creation and removal (single, multiple, recursive)
- Search and filtering (patterns, extensions)
- Information display 
- Utility methods (Copy, Clone, Refresh, chaining)
- Advanced scenarios (different drives, special folders, error handling)
- Complete workflow example

#AI: Generated by ClaudeAI

*/

#================================#
#  BASIC FOLDER CREATION & INFO  #
#================================#

/*--- Basic Folder Creation and Information

pr()

o1 = new stzFolder("C:\MyTestFolder")
o1 {

    ? @@NL( Info() )
    #-->
	' [
		[ "name", "MyTestFolder" ],
		[ "path", "C:/MyTestFolder" ],
		[ "absolutepath", "C:/MyTestFolder" ],
		[ "count", 0 ],
		[ "files", 0 ],
		[ "folders", 0 ],
		[ "isempty", 1 ],
		[ "isreadable", 1 ],
		[ "isroot", 0 ],
		[ "exists", 1 ]
	]'
    

	? Name()
    #--> MyTestFolder
    
    ? IsEmpty()
    #--> TRUE
    
    ? Count() # Or Size()
    #--> 0
}

pf()
# Executed in 0.01 second(s) in Ring 1.22

/*--- Getting Folder Names and Paths

pr()

o1 = new stzFolder("C:\MyTestFolder\Documents\Projects")
o1 {

    ? Name()
    #--> Projects
    
    ? Path()
    #--> C:\Users\John\Documents\Projects
    
    ? FullPath() # Or AbsolutePath()
    #--> C:\Users\John\Documents\Projects
    
    ? IsAbsolute()
    #--> TRUE
    
    ? IsRoot()
    #--> FALSE
}

pf()
# Executed in almost 0 second(s) in Ring 1.22

/*--- Folder Status Checks

pr()

o1 = new stzFolder("C:\Windows")
o1 {
    ? IsReadable()
    #--> TRUE
    
    ? Exists("System32")
    #--> TRUE
    
    ? HasFiles() # Or ContainsFiles()
    #--> TRUE
    
    ? HasFolders() # Or HasDirs()
    #--> TRUE

pf()
# Executed in almost 0 second(s) in Ring 1.22

#=====================#
#  FOLDER NAVIGATION  #
#=====================#

/*--- Basic Navigation

pr()

o1 = new stzFolder("C:\Users")
o1 {
    # Current path
	? Path()
    #--> C:\Users
    
    GoTo("Public") # Or MoveTo() or cd()
	? Path()
    #--> C:\Users\Public
    
    Up() # Or GoUp() or cdUp()
    ? Path()
    #--> C:\Users
    
    GoHome()
    ? Path()
    #--> C:\Users\[Username]
}

pf()
# Executed in almost 0 second(s) in Ring 1.22

#==================================#
#  FILE & FOLDER OPERATIONS       #
#==================================#

/*--- Listing Files and Folders

pr()

o1 = new stzFolder("C:\Windows\System32")
o1 {

	? CountFiles()

    aFiles = Files()
	? First3(aFiles)
    #--> calc.exe
    #    notepad.exe
    #    cmd.exe
    
	CountFolders()

    aFolders = Folders() # Or Dirs() or SubFolders()
	? First3(aFolders)
    #--> drivers
    #    config
    #    Tasks
}

pf()
# Executed in 0.07 second(s) in Ring 1.22

/*--- Counting Contents

pr()

o1 = new stzFolder("C:\Program Files")
o1 {

	# Counting files and forlders at the current level

    ? Count() # Or CountFilesAndFolders()
    #--> 42
    
    ? CountFiles()
    #--> 1
    
    ? CountFolders() + NL # Or CountDirs()
    #--> 41

	# Counting files and folders indepth/recursively

	? CountXT() # or DeepCount()
	#--> 16309

	? CountFilesXT() # or DeepCountFiles()
	#--> 14392

	? CountFoldersXT() # Or DeepCountFolders()
	#--> 1917

}

pf()
# Executed in 0.74 second(s) in Ring 1.22

/*--- Checking for Specific Content

pr()

o1 = new stzFolder("C:\Windows")
o1 {
    ? Contains("System32") # Or Has()
    #--> TRUE
    
    ? ContainsFile("explorer.exe")
    #--> TRUE
    
    ? ContainsFolder("System32") + NL # Or ContainsDir()
    #--> TRUE

	? DeepContains("Boot") # Takes most of the execution time!
	#--> TRUE
}

pf()
# Executed in 8.45 second(s) in Ring 1.22

#=============================#
#  FOLDER CREATION & REMOVAL  #
#=============================#

/*--- Creating Single Folders

pr()

o1 = new stzFolder("C:\TestArea")
o1 {
    oNewFolder = CreateFolder("TestSubFolder") # Or mkdir() or MakeFolder()
    ? oNewFolder.Name()
    #--> TestSubFolder
}

pf()
# Executed in almost 0 second(s) in Ring 1.22

/*--- Creating Multiple Folders

pr()

o1 = new stzFolder("C:\TestArea")
o1 {

    aCreated = CreateFolders([ "Docs", "Images", "Videos", "Music" ])
    
    for oFolder in aCreated
        ? oFolder.Name()
    next
    #--> Docs
    #    Images
    #    Videos
    #    Music
}

pf()
# Executed in almost 0 second(s) in Ring 1.22

/*--- Creating Folder Paths

pr()

o1 = new stzFolder("C:\")
o1 {
    # Creating deep path...
    oDeepFolder = CreatePath("TestArea\Level1\Level2\Level3") # Or mkpath()
    ? oDeepFolder.Name()
    #--> Level3
}

pf()
# Executed in 0.01 second(s) in Ring 1.22

/*--- Removing Files and Folders

pr()

o1 = new stzFolder("C:\TestArea")
o1 {
    # Create test content first
    CreateFolder("ToDelete")
	? CountFolders()
    #--> 6
    
    RemoveFolder("ToDelete") # Or rmdir() or DeleteFolder()
    ? CountFolders()
    #--> 5
    
    # Test file removal

	? FileExists("test.txt") #--> FALSE

	# RemoveFile("test.txt") # Or DeleteFile()
    #--> ERROR: File 'test.txt' doesn't exist here.

	CreateFile("test.txt")
	? FileExists("test.txt") #--> TRUE
	
}

pf()
# Executed in 0.01 second(s) in Ring 1.22

/*--- Recursive Removal

pr()

o1 = new stzFolder("C:\TestArea\Level1")
o1 {
    # Current path before removal
	? Path()
    #--> C:\TestArea\Level1
    
    # Removing all the folder and its subfolders (recursively)

    bSuccess = DeepRemoveAll() # Or DeleteRecursively()
    ? bSuccess
    #--> Removal successful: TRUE
}

pf()
# Executed in almost 0 second(s) in Ring 1.22

#======================#
#  SEARCH & FILTERING  #
#======================#

/*--- Basic Search Operations

pr()

o1 = new stzFolder("C:\Windows\System32")
o1 {
    # Finding all .exe files

    acExeFiles = FindFiles("*.exe")
    ? CountFiles() #--> 4696

    ? @FirstN(5, acExeFiles)
    #--> calc.exe
    #    notepad.exe
    #    cmd.exe
    #    ping.exe
    #    ipconfig.exe
}

pf()
# Executed in 0.17 second(s) in Ring 1.23
# Executed in 0.19 second(s) in Ring 1.22

/*--- Specialized Search Methods

pr()

o1 = new stzFolder("C:\Windows\System32")
o1 {
    # Finding .dll files
    aDlls = FindFiles("*.dll")
    ? len(aDlls)
    #--> 3611
    
    # Finding folders starting with 'config'
    aConfigFolders = FindFolders("config*")
    ? len(aConfigFolders)
    #--> Config folders: 2
    
    ? @@(aConfigFolders)
    #--> [ "config", "Configuration" ]
}

pf()
# Executed in 0.17 second(s) in Ring 1.23
# Executed in 0.18 second(s) in Ring 1.22

/*--- Files by Extension

pr()

o1 = new stzFolder("C:\Windows\System32")
o1 {
    # Getting .exe files
    aExeFiles = FilesByExtension(".exe")
    ? len(aExeFiles)
    #--> 642
    
    # Getting .dll files (without dot)
    aDllFiles = FilesByExtension("dll")  # Extension with or without dot works
    ? len(aDllFiles)
    #--> 3382
}

pf()
# Executed in 0.04 second(s) in Ring 1.22

/*--- Specialized Search Methods

pr()

o1 = new stzFolder("C:\Windows\System32") #TODO Error
o1 {
    # Finding .dll files
    ? VizFindFiles("*.dll")
    
    # Finding folders starting with 'config'
    ? FindFolders("config*")

}


pf()

/*---

pr()

o1 = new stzFolder("D:\GitHub\stzlib\libraries\stzlib\core\")
? o1.VizFindFiles("*memory*")

pf()
# Executed in 0.01 second(s) in Ring 1.22

#==========================#
#  INFORMATION & DISPLAY   #
#==========================#

/*--- Detailed Information

pr()

o1 = new stzFolder("C:\Windows")
? @@NL(o1.Info())
#-->'
[
	[ "name", "Windows" ],
	[ "path", "C:/Windows" ],
	[ "absolutepath", "C:/Windows" ],
	[ "count", 118 ],
	[ "files", 32 ],
	[ "folders", 86 ],
	[ "isempty", 0 ],
	[ "isreadable", 1 ],
	[ "isroot", 0 ],
	[ "exists", 1 ]
]
'

pf()
# Executed in 0.01 second(s) in Ring 1.22

/*--- Folder Tree Display
*/
pr()

# Softanza embraces a visual grammer for folder tree display
# that is both expressive and practical.

# the grammer can be understood from the @aDisplatChars attribute
# you can find in the class and here is its content:
/*
	@acDisplayChars = [

		# The folder tree lines use these chars
		:VerticlalChar = "│",
		:VerticalCharTick = "├",
		:ClosingChar = "╰",

		# File uses one of these two icons
		:File = " 🗋",		# file icon by default
		:FileFound = "📄",	# file icon when a file is found

		# Root folder uses one of these two icons
		:FolderRoot = "🗀",		# folder icon by default (when Show() is used)
		:FolderRootXT = "📁",	# folder icon when ShowXT() is used and an info
								# is added between parenthesis to the right

		# An expanded folder uses one of these two icons
		:FolderOpened = "🗁",		# when no found files exists inside it
		:FolderOpenedFound = "📂",	# when files are found inside it

		# A closed folder uses one of these two icons
		:FolderClosedEmpty = "🗀", 	# when the folder is empty
		:FolderClosedFull = "🖿",	# when the folder contains files

		# After a VizFind use this icon in the root stat label
		:FolderRootSearchSymbol = "",

		# Each found file is proceeded by this icon
		:FileFoundSymbol = "👉"

	]
*/

# Here is an example:

o1 = new stzFolder("C:\TestArea")

# Immedialtely we can get this:
? o1.Show() + NL
#-->
'
🗀 TestArea
├─🗀 Docs
├─🖿 Images
├─🗀 Music
├─🗀 Videos
├─🖿 tempo
╰─ 🗋 test.txt
'

# Visually we can induce that the folder is made of one file
# at its roor (test.tx) and 5 subfolders. Three of them are
# empty (Docs, Music, and Videos) as indicated by 🗀. The two
# others (Images and Temp) are not empty as indicated by 🖿.

# Sure, we can do this easilty for small structures, butwhat if
# we had more files and folders. Softanza will do the visual count
# for your and adds useful information to the visual tree just
# by using the eXTended form of Show:

? o1.ShowXT()
#-->
'
📁 TestArea (6)
├─ 🗋 test.txt
├─🗀 Docs
├─🖿 Images(3)
├─🗀 Music
├─🗀 Videos
╰─🖿 tempo(2)
'

# The first thing to note is the visual hint introduced by
# the use of the 📁 insitead of 🗀 as a root folder ico,
# to accentiate the fact that we are in XT information
# added mode (and hence you are called tp pay attention
# to the additional metat data Softanza will add.

# In this case, just the stat of number of inner elements
# inside each non-empty folder are added between parenthesis.
# Which helps a lot, but what if wanted to configure the
# meta data by ourselves and add more granular stats about
# the cout of files and subfolders inside each folder?

# Very easy to do: you call SetDisplayStat() and tell it
# to compute whatever stat you need, like this:

o1.SetDisplayStat('@CountFiles files, @CountFolders folders')

# And you call ShowXT() again:

? o1.ShowXT()
'
📁 TestArea (1 files, 6 folders) # <-- Your stats added here
├─ 🗋 test.txt
├─🗀 Docs
├─🖿 Images(2 files, 1 folders)	# <-- and here
├─🗀 Music
├─🗀 Videos
├─🗀 notes
╰─🖿 tempo(2 files, 0 folders)	# <-- and here
'

# At any momement of the journey, with extended stats or not,
# yoou can instuct Softanza to show you all the deep structure
# of the folder tree by using ExpandAll()

o1.ExpandAll()

# And show the full tree in simple Show() mode
? o1.Show()
#-->
'
🗀 TestArea
├─ 🗋 test.txt
├─🗀 Docs
├─🗁 Images
│ ├─ 🗋 image1.png
│ ├─ 🗋 image2.png
│ ╰─🖿 notes
├─🗀 Music
├─🗀 Videos
├─🗀 notes
╰─🗁 tempo
  ├─ 🗋 temp1.txt
  ╰─ 🗋 temp2.txt
'

# or the full strcture in eXTended stats-augmented ShowXT() mode:
? o1.ShowXT()
#-->
'
📁 TestArea (1 files, 6 folders)
├─ 🗋 test.txt
├─🗀 Docs
├─🗁 Images(4 files, 2 folders)
│ ├─ 🗋 image1.png
│ ├─ 🗋 image2.png
│ ╰─🖿 notes(2 files)
├─🗀 Music
├─🗀 Videos
├─🗀 notes
╰─🗁 tempo(2 files)
  ├─ 🗋 temp1.txt
  ╰─ 🗋 temp2.txt
'

# You would say that's great! Yes, it is true, but it is not enough!
# Softanza has more in the buket to cope to the most granular needs
# in your file and folder exploration experience!

# So let's collapse all and go back to the origin state before I show you
# the next feature in this narration:

o1.CollapseAll()
? o1.Show()
#-->
'
🗀 TestArea
├─ 🗋 test.txt
├─🗀 Docs
├─🖿 Images
├─🗀 Music
├─🗀 Videos
├─🗀 notes
╰─🖿 tempo
'

# What if you want to expand a particular folder not all the folders
# like it is possible with ExpandAll()? Easy as usuale:

o1.ExpandFolder("Images")
? o1.Show()
#-->
'
🗀 TestArea
├─ 🗋 test.txt
├─🗀 Docs
├─🗁 Images		# <-- Only this folder is expanded as requested
│ ├─ 🗋 image1.png
│ ├─ 🗋 image2.png
│ ╰─🖿 notes	# <-- Note that this subfolder of Images is not expanded by default
├─🗀 Music
├─🗀 Videos
├─🗀 notes
╰─🖿 tempo'

# To expand Images along with it's subfolder Notes, you just add it
# to the ExpandFolders() list of params:

o1.ExplandFolders([ "Images", "Notes" ])
? o1.Show()

# But you can also expand the folder and all its deep subfolders
# by using the DeepExpandFolder() at the first place:

o1.DeepExpandFolder("Images")
? o1.Show()
#-->
'
🗀 TestArea
├─ 🗋 test.txt
├─🗀 Docs
├─🗁 Images
│ ├─ 🗋 image1.png
│ ├─ 🗋 image2.png
│ ╰─🗁 notes
│   ├─ 🗋 howto.txt
│   ╰─ 🗋 sources.txt
├─🗀 Music
├─🗀 Videos
├─🗀 notes
╰─🖿 tempo
'

# And of cource, the same logic applies with statics-augmented display
# using ShowXT(). Sof for example to instruct Softanza expand only
# the Temp folder in that mode we say:

o1.CollapseAll()
o1.ExpandFolder("tempo")
? o1.ShowXT()
#-->
'
📁 TestArea (1:7 files, 6:7 folders)
├─ 🗋 test.txt
├─🗀 Docs
├─🗁 Images (2:4 files, 1 folder)
│ ├─ 🗋 image1.png
│ ├─ 🗋 image2.png
│ ╰─🗁 notes (2 files)
│   ├─ 🗋 howto.txt
│   ╰─ 🗋 sources.txt
├─🗀 Music
├─🗀 Videos
├─🗀 notes
╰─🖿 tempo (2 files)
'

# Let's take a moment to understand ho wthe meta-statistics should be read:

# This first line 📁 TestArea (1:7 files, 6:7 folders) means that the
# root folder contains 1 file on root and 7 totally in all level. Similariliy,
# concerning subfolders, it contains 6 of them directly under the roor, and
# an other one sitting deeper in the structure (visibly Images/Notes) making
# a totla number of 7 folders.

# In the same way you read ├─🗁 Images (2:4 files, 1 folder) as the Images
# folder containing 3 files on its root, and a total of 4 in all its structure.
# the folder conatins only 1 subfolder.

# For ╰─🗁 notes (2 files) it's easy since not subfolfer are involved and
# the Notes folder contain purely purely 2 files.

# Does this visual exploration ended here? No, I still have a unique feature
# to show you: visually finding files and folders in a folder tree!



pf()
# Executed in 0.07 second(s) in Ring 1.22

/*---- VISUAL FINDING
*/
pr()

o1 = new stzFolder("C:\TestArea")

# Vizfinding images in png format
o1.SetDisplayOrder(:FileFirstAscending)
? o1.VizFindFiles("*.png") + NL
#-->
"
📁 TestArea (🔍 0 file matches for '*.png')
├─📁 Docs
├─🔍📁 Images
│  ╰─🎯📄 image.png
├─📁 Music
├─📁 NewlyAdded
├─📁 Videos
╰─📄 test.txt
"

# Vizfinding folders with an 'i' letter in their name

? o1.VizFindFolders("*i*")

pf()

#===================#
#  UTILITY METHODS  #
#===================#


/*--- Copy and Clone

pr()

o1 = new stzFolder("C:\Windows\System32")
o2 = o1.Copy() # Or Clone()

# Original path
? o1.Path()
#--> C:\Windows\System32

# Copy path
? o2.Path()
#--> C:\Windows\System32

pf()
# Executed in almost 0 second(s) in Ring 1.22

/*--- Refresh Operation

pr()

o1 = new stzFolder("C:\TestArea")
o1 {
    # Count before refresh
	? Count() # or CountFilesAndFolders()
    #-->  5
    
    CreateFolder("NewlyAdded")
    
    Refresh()
    ? Count()
    #--> 6
}

pf()
# Executed in almost 0 second(s) in Ring 1.23
# Executed in 0.02 second(s) in Ring 1.22

/*--- Folder creation and navigation logic
   Demonstrates how to use the stzFolder class to navigate the file system,
   create folders, and track the current path. Highlights support for
   both sequential navigation and scoped (block-based) folder creation.

pr()

o1 = new stzFolder("C:\")  # Start from root directory
o1 {

    GoTo("Windows")        # Navigate into 'Windows' folder
    GoTo("System32")       # Further descend into 'System32' (example of deep navigation)
    Up()                   # Move one level up (back to 'Windows')
    GoTo("Temp")           # Enter 'Temp' folder — final target before creation

	# Confirm current path before folder operations
    ? Path()
    #--> C:/Windows/Temp

    # Chain folder creation without changing the current location
    CreateFolder("ChainTest")  
    # Creates 'ChainTest' inside 'Temp' — current path remains at 'Temp'

    GoTo("ChainTest")       
    # Manually enter 'ChainTest' after creation

    CreateFolder("SubTest") {  
        # Create 'SubTest' inside 'ChainTest' and *immediately* enter it via block scope
        ? Path() 
        # Outputs full path from inside the 'SubTest' block
    }

    # After the block, we are still inside 'SubTest'
    ? Path()
    #--> C:/Windows/Temp/ChainTest/SubTest
    # Confirms persistent navigation after block exit
}

pf()
# Executed in almost 0 second(s) in Ring 1.22

#==========================#
#  COMPREHENSIVE WORKFLOW  #
#==========================#

/*--- Complete Folder Management Workflow
*/
pr()

# 1. Create main project folder
oProject = new stzFolder("C:\MyProject")
oProject {

    ? @@NL( Info() ) + NL
    
    # 2. Create project structure

    aFolders = ["src", "docs", "tests", "build", "assets"]
    CreateFolders(aFolders)
   
	? @@( Folders() ) + NL
    
    # 3. Navigate and create sub-structure

    GoTo("src")
    CreateFolders(["models", "views", "controllers"])
    
    Up()
    GoTo("assets")
    CreateFolders(["images", "css", "js"])
    
    # Go back to root and show final structure
    Up()

    # Final project tree
    ShowXT(2)
    
    # 5. Get comprehensive info
    ? ""
    ? @@NL( Info() ) + NL
    
    # 6. Search for specific patterns

    ? @@NL( FindFolders("*view*") )
    
    # 7. Cleanup (commented out for safety)

    ? DeepRemoveAll() # TRUE
    ? Count() #--> 0 #Now the folder is empy!

}

pf()
# Executed in 0.01 second(s) in Ring 1.23
